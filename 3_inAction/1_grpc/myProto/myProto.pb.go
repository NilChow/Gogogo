// Code generated by protoc-gen-go. DO NOT EDIT.
// source: myProto.proto

package myProto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReqMsg struct {
	MsgStr               string   `protobuf:"bytes,1,opt,name=msgStr,proto3" json:"msgStr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqMsg) Reset()         { *m = ReqMsg{} }
func (m *ReqMsg) String() string { return proto.CompactTextString(m) }
func (*ReqMsg) ProtoMessage()    {}
func (*ReqMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_87712bb003f71cfb, []int{0}
}

func (m *ReqMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqMsg.Unmarshal(m, b)
}
func (m *ReqMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqMsg.Marshal(b, m, deterministic)
}
func (m *ReqMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMsg.Merge(m, src)
}
func (m *ReqMsg) XXX_Size() int {
	return xxx_messageInfo_ReqMsg.Size(m)
}
func (m *ReqMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMsg proto.InternalMessageInfo

func (m *ReqMsg) GetMsgStr() string {
	if m != nil {
		return m.MsgStr
	}
	return ""
}

type ResMsg struct {
	MsgInt               int32    `protobuf:"varint,1,opt,name=msgInt,proto3" json:"msgInt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResMsg) Reset()         { *m = ResMsg{} }
func (m *ResMsg) String() string { return proto.CompactTextString(m) }
func (*ResMsg) ProtoMessage()    {}
func (*ResMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_87712bb003f71cfb, []int{1}
}

func (m *ResMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResMsg.Unmarshal(m, b)
}
func (m *ResMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResMsg.Marshal(b, m, deterministic)
}
func (m *ResMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMsg.Merge(m, src)
}
func (m *ResMsg) XXX_Size() int {
	return xxx_messageInfo_ResMsg.Size(m)
}
func (m *ResMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ResMsg proto.InternalMessageInfo

func (m *ResMsg) GetMsgInt() int32 {
	if m != nil {
		return m.MsgInt
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqMsg)(nil), "myProto.ReqMsg")
	proto.RegisterType((*ResMsg)(nil), "myProto.ResMsg")
}

func init() { proto.RegisterFile("myProto.proto", fileDescriptor_87712bb003f71cfb) }

var fileDescriptor_87712bb003f71cfb = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xad, 0x0c, 0x28,
	0xca, 0x2f, 0xc9, 0xd7, 0x2b, 0x00, 0x91, 0x42, 0xec, 0x50, 0xae, 0x92, 0x02, 0x17, 0x5b, 0x50,
	0x6a, 0xa1, 0x6f, 0x71, 0xba, 0x90, 0x18, 0x17, 0x5b, 0x6e, 0x71, 0x7a, 0x70, 0x49, 0x91, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0x07, 0x51, 0x51, 0x8c, 0x50, 0xe1, 0x99, 0x57, 0x02,
	0x56, 0xc1, 0x1a, 0x04, 0xe5, 0x19, 0x59, 0x70, 0xb1, 0xf9, 0x56, 0xba, 0x07, 0x15, 0x24, 0x0b,
	0xe9, 0x71, 0x71, 0x38, 0x27, 0x26, 0x97, 0xe6, 0x24, 0x96, 0xa4, 0x0a, 0xf1, 0xeb, 0xc1, 0xac,
	0x84, 0x58, 0x20, 0x85, 0x2c, 0x00, 0x32, 0x4f, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x1a, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xf5, 0x88, 0x0b, 0x9e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyGRpcClient is the client API for MyGRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyGRpcClient interface {
	Caculate(ctx context.Context, in *ReqMsg, opts ...grpc.CallOption) (*ResMsg, error)
}

type myGRpcClient struct {
	cc *grpc.ClientConn
}

func NewMyGRpcClient(cc *grpc.ClientConn) MyGRpcClient {
	return &myGRpcClient{cc}
}

func (c *myGRpcClient) Caculate(ctx context.Context, in *ReqMsg, opts ...grpc.CallOption) (*ResMsg, error) {
	out := new(ResMsg)
	err := c.cc.Invoke(ctx, "/myProto.MyGRpc/Caculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyGRpcServer is the server API for MyGRpc service.
type MyGRpcServer interface {
	Caculate(context.Context, *ReqMsg) (*ResMsg, error)
}

// UnimplementedMyGRpcServer can be embedded to have forward compatible implementations.
type UnimplementedMyGRpcServer struct {
}

func (*UnimplementedMyGRpcServer) Caculate(ctx context.Context, req *ReqMsg) (*ResMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Caculate not implemented")
}

func RegisterMyGRpcServer(s *grpc.Server, srv MyGRpcServer) {
	s.RegisterService(&_MyGRpc_serviceDesc, srv)
}

func _MyGRpc_Caculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGRpcServer).Caculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myProto.MyGRpc/Caculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGRpcServer).Caculate(ctx, req.(*ReqMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyGRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myProto.MyGRpc",
	HandlerType: (*MyGRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Caculate",
			Handler:    _MyGRpc_Caculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myProto.proto",
}
